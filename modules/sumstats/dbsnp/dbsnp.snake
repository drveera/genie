#!/bin/env snakemake

#imports
import sys
import re
import os

dbsnpdir = sys.path[0]
maindir = re.search(r'.*genie/',dbsnpdir).group()
sys.path.insert(1,maindir + "/library")
import md
from md import process_list, flen

annovar = f"{maindir}/resources/annovar/software/annovar/table_annovar.pl"
humandb = f"{maindir}/resources/annovar/software/annovar/humandb"
rscript1 = f"{dbsnpdir}/create.avinput.R"
rscript2 = f"{dbsnpdir}/create.avinput2.R"
rscript3 = f"{dbsnpdir}/update.summary.R"


sumstats=config['--sumstats']
sumstats = process_list(sumstats)
pfix_dbsnp = config['pfix_dbsnp']
outfolder = config['--outfolder']

#script outputs
avinput1=f"{pfix_dbsnp}{{wcard}}.annovar.avinput1"
avinput2=f"{pfix_dbsnp}{{wcard}}.annovar.avinput2"
withids = f"{pfix_dbsnp}{{wcard}}.withids"
withoutids1 = f"{pfix_dbsnp}{{wcard}}.withoutids1"
withoutids2 = f"{pfix_dbsnp}{{wcard}}.withoutids2"
anno1 = f"{pfix_dbsnp}{{wcard}}.anno1.hg19_multianno.txt"
anno1_prefix = f"{pfix_dbsnp}{{wcard}}.anno1"
anno2 = f"{pfix_dbsnp}{{wcard}}.anno2.hg19_multianno.txt"
anno2_prefix = f"{pfix_dbsnp}{{wcard}}.anno2"
updated_summary = f"{pfix_dbsnp}{{wcard}}.ann"



rule genie_dbsnp_all:
    input: expand(updated_summary, wcard = sumstats)

rule genie_create_avinput:
    input: lambda wildcards: sumstats[wildcards.wcard]
    output: a = temp(avinput1), b = temp(withids), c = temp(withoutids1)
    params: rscript1, f"{pfix_dbsnp}{{wcard}}"
    shell: "Rscript {params[0]} {input} {params[1]}"

rule genie_annotate1:
    input: avinput1
    output: temp(anno1)
    params: script = annovar, db = humandb, out = anno1_prefix
    shell:
        "{params.script} {input} {params.db}  -buildver hg19 -out {params.out}  -remove -protocol avsnp147 -operation f -nastring NA"

rule genie_create_avinput2:
    input: anno1
    output: temp(avinput2)
    params: script = rscript2
    shell: "Rscript {params.script} {input} {output}"

rule genie_annotate2:
    input: a = avinput2
    output: temp(anno2)
    params: script = annovar, db = humandb, out = anno2_prefix
    run:
        if os.path.getsize(input.a) > 0:
            shell("{params.script} {input} {params.db}  -buildver hg19 -out {params.out}  -remove -protocol avsnp147 -operation f -nastring NA")
        else:
            shell("touch {output[0]}")

rule update_summary:
    input: lambda wildcards: sumstats[wildcards.wcard], anno1, anno2, avinput1, avinput2
    output: protected(updated_summary)
    params: rscript3,f"{pfix_dbsnp}{{wcard}}"
    shell:
        "Rscript {params[0]} {input[0]} {params[1]} {output}"
    
